package main

import (
	"go/format"
	"testing"

	"github.com/MyNihongo/codegen"
	"github.com/stretchr/testify/assert"
)

func formatFile(file *codegen.File) string {
	res, _ := format.Source([]byte(file.GoString()))
	return string(res)
}

func TestFileErrorIfPackageNotFound(t *testing.T) {
	fixture := map[string]*pkgFuncs{
		"github.com/MyNihongo/inject/examples/pkg1": {
			alias: "pkg1",
			funcs: map[string]*funcDecl{
				"Service1": {
					name:       "GetService1",
					injectType: Singleton,
					paramDecls: []*typeDecl{
						{
							pkgImport: "github.com/MyNihongo/inject/examples/pkg2", // pkg2 is not registered
							typeName:  "Service2",
						},
					},
				},
			},
		},
	}

	file, err := generateServiceProvider("di", fixture)

	assert.Nil(t, file)
	assert.Error(t, err, "package github.com/MyNihongo/inject/examples/pkg2 is not registered")
}

func TestFileErrorIfTypeNotFound(t *testing.T) {
	fixture := map[string]*pkgFuncs{
		"github.com/MyNihongo/inject/examples/pkg1": {
			alias: "pkg1",
			funcs: map[string]*funcDecl{
				"Service1": {
					name:       "GetService1",
					injectType: Singleton,
					paramDecls: []*typeDecl{
						{
							pkgImport: "github.com/MyNihongo/inject/examples/pkg2",
							typeName:  "ServiceNotExists", // not present in pkg2
						},
					},
				},
			},
		},
		"github.com/MyNihongo/inject/examples/pkg2": {
			alias: "pkg2",
			funcs: map[string]*funcDecl{
				"Service2": {
					name:       "GetService2",
					injectType: Singleton,
					paramDecls: []*typeDecl{},
				},
			},
		},
	}

	file, err := generateServiceProvider("di", fixture)

	assert.Nil(t, file)
	assert.Error(t, err, "type ServiceNotExists is not found in the package github.com/MyNihongo/inject/examples/pkg2")
}

func TestFileErrorInconsistentInjection(t *testing.T) {
	fixture := map[string]*pkgFuncs{
		"github.com/MyNihongo/inject/examples/pkg1": {
			alias: "pkg1",
			funcs: map[string]*funcDecl{
				"Service1": {
					name:       "GetService1",
					injectType: Singleton,
					paramDecls: []*typeDecl{
						{
							pkgImport: "github.com/MyNihongo/inject/examples/pkg2",
							typeName:  "Service2",
						},
					},
				},
			},
		},
		"github.com/MyNihongo/inject/examples/pkg2": {
			alias: "pkg2",
			funcs: map[string]*funcDecl{
				"Service2": {
					name:       "GetService2",
					injectType: Transient, // cannot inject into Singleton
					paramDecls: []*typeDecl{},
				},
			},
		},
	}

	file, err := generateServiceProvider("di", fixture)

	assert.Nil(t, file)
	assert.Error(t, err, "cannot inject transient (GetService2) into singleton (GetService1)")
}

func TestFileTransientSingle(t *testing.T) {
	const want = `// Code generated by my-nihongo-di. DO NOT EDIT.
package di

import pkg1 "github.com/MyNihongo/inject/examples/pkg1"

// ProvideService1 provides a transient instance of github.com/MyNihongo/inject/examples/pkg1.Service1
func ProvideService1() pkg1.Service1 {
	return pkg1.GetService1()
}
`
	fixture := map[string]*pkgFuncs{
		"github.com/MyNihongo/inject/examples/pkg1": {
			alias: "pkg1",
			funcs: map[string]*funcDecl{
				"Service1": {
					name:       "GetService1",
					injectType: Transient,
					paramDecls: []*typeDecl{},
				},
			},
		},
	}

	file, err := generateServiceProvider("di", fixture)
	got := formatFile(file)

	assert.Nil(t, err, want, got)
	assert.EqualValues(t, want, got)
}

func TestFileSingletonSingle(t *testing.T) {
	const want = `// Code generated by my-nihongo-di. DO NOT EDIT.
package di

import (
	pkg1 "github.com/MyNihongo/inject/examples/pkg1"
	"sync"
)

var impl_Service1 pkg1.Service1

// ProvideService1 provides a singleton instance of github.com/MyNihongo/inject/examples/pkg1.Service1
func ProvideService1() pkg1.Service1 {
	sync.DoOnce(func() {
		impl_Service1 = pkg1.GetService1()
	})
	return impl_Service1
}
`
	fixture := map[string]*pkgFuncs{
		"github.com/MyNihongo/inject/examples/pkg1": {
			alias: "pkg1",
			funcs: map[string]*funcDecl{
				"Service1": {
					name:       "GetService1",
					injectType: Singleton,
					paramDecls: []*typeDecl{},
				},
			},
		},
	}

	file, err := generateServiceProvider("di", fixture)
	got := formatFile(file)

	assert.Nil(t, err, want, got)
	assert.EqualValues(t, want, got)
}

func TestFileInjectTransientTwo(t *testing.T) {
	const want = `// Code generated by my-nihongo-di. DO NOT EDIT.
package di

import (
	pkg1 "github.com/MyNihongo/inject/examples/pkg1"
	pkg2 "github.com/MyNihongo/inject/examples/pkg2"
)

// ProvideService1 provides a transient instance of github.com/MyNihongo/inject/examples/pkg1.Service1
func ProvideService1() pkg1.Service1 {
	p0 = ProvideService2()
	return pkg1.GetService1(p0)
}

// ProvideService2 provides a transient instance of github.com/MyNihongo/inject/examples/pkg2.Service2
func ProvideService2() pkg2.Service2 {
	return pkg2.GetService2()
}
`

	fixture := map[string]*pkgFuncs{
		"github.com/MyNihongo/inject/examples/pkg1": {
			alias: "pkg1",
			funcs: map[string]*funcDecl{
				"Service1": {
					name:       "GetService1",
					injectType: Transient,
					paramDecls: []*typeDecl{
						{
							pkgImport: "github.com/MyNihongo/inject/examples/pkg2",
							typeName:  "Service2",
						},
					},
				},
			},
		},
		"github.com/MyNihongo/inject/examples/pkg2": {
			alias: "pkg2",
			funcs: map[string]*funcDecl{
				"Service2": {
					name:       "GetService2",
					injectType: Transient,
					paramDecls: []*typeDecl{},
				},
			},
		},
	}

	file, err := generateServiceProvider("di", fixture)
	got := formatFile(file)

	assert.Nil(t, err)
	assert.Equal(t, want, got)
}

func TestFileInjectSingletonTwo(t *testing.T) {
	const want = `// Code generated by my-nihongo-di. DO NOT EDIT.
package di

import (
	pkg1 "github.com/MyNihongo/inject/examples/pkg1"
	pkg2 "github.com/MyNihongo/inject/examples/pkg2"
	"sync"
)

var impl_Service1 pkg1.Service1

// ProvideService1 provides a singleton instance of github.com/MyNihongo/inject/examples/pkg1.Service1
func ProvideService1() pkg1.Service1 {
	sync.DoOnce(func() {
		p0 = ProvideService2()
		impl_Service1 = pkg1.GetService1(p0)
	})
	return impl_Service1
}

var impl_Service2 pkg2.Service2

// ProvideService2 provides a singleton instance of github.com/MyNihongo/inject/examples/pkg2.Service2
func ProvideService2() pkg2.Service2 {
	sync.DoOnce(func() {
		impl_Service2 = pkg2.GetService2()
	})
	return impl_Service2
}
`

	fixture := map[string]*pkgFuncs{
		"github.com/MyNihongo/inject/examples/pkg1": {
			alias: "pkg1",
			funcs: map[string]*funcDecl{
				"Service1": {
					name:       "GetService1",
					injectType: Singleton,
					paramDecls: []*typeDecl{
						{
							pkgImport: "github.com/MyNihongo/inject/examples/pkg2",
							typeName:  "Service2",
						},
					},
				},
			},
		},
		"github.com/MyNihongo/inject/examples/pkg2": {
			alias: "pkg2",
			funcs: map[string]*funcDecl{
				"Service2": {
					name:       "GetService2",
					injectType: Singleton,
					paramDecls: []*typeDecl{},
				},
			},
		},
	}

	file, err := generateServiceProvider("di", fixture)
	got := formatFile(file)

	assert.Nil(t, err)
	assert.Equal(t, want, got)
}

func TestFileInjectSingletonIntoTransient(t *testing.T) {
	const want = `// Code generated by my-nihongo-di. DO NOT EDIT.
package di

import (
	pkg1 "github.com/MyNihongo/inject/examples/pkg1"
	pkg2 "github.com/MyNihongo/inject/examples/pkg2"
	"sync"
)

// ProvideService1 provides a transient instance of github.com/MyNihongo/inject/examples/pkg1.Service1
func ProvideService1() pkg1.Service1 {
	p0 = ProvideService3()
	p1 = ProvideService2()
	return pkg1.GetService1(p0, p1)
}

var impl_Service2 pkg2.Service2

// ProvideService2 provides a singleton instance of github.com/MyNihongo/inject/examples/pkg2.Service2
func ProvideService2() pkg2.Service2 {
	sync.DoOnce(func() {
		impl_Service2 = pkg2.GetService2()
	})
	return impl_Service2
}

// ProvideService3 provides a transient instance of github.com/MyNihongo/inject/examples/pkg2.Service3
func ProvideService3() pkg2.Service3 {
	return pkg2.GetService3()
}
`

	fixture := map[string]*pkgFuncs{
		"github.com/MyNihongo/inject/examples/pkg1": {
			alias: "pkg1",
			funcs: map[string]*funcDecl{
				"Service1": {
					name:       "GetService1",
					injectType: Transient,
					paramDecls: []*typeDecl{
						{
							pkgImport: "github.com/MyNihongo/inject/examples/pkg2",
							typeName:  "Service3",
						},
						{
							pkgImport: "github.com/MyNihongo/inject/examples/pkg2",
							typeName:  "Service2",
						},
					},
				},
			},
		},
		"github.com/MyNihongo/inject/examples/pkg2": {
			alias: "pkg2",
			funcs: map[string]*funcDecl{
				"Service2": {
					name:       "GetService2",
					injectType: Singleton,
					paramDecls: []*typeDecl{},
				},
				"Service3": {
					name:       "GetService3",
					injectType: Transient,
					paramDecls: []*typeDecl{},
				},
			},
		},
	}

	file, err := generateServiceProvider("di", fixture)
	got := formatFile(file)

	assert.Nil(t, err)
	assert.Equal(t, want, got)
}
